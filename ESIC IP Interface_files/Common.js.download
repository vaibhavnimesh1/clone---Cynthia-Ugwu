// Added by AKHIL - Aadhaar Authentication
//--- Checks for 12-Digit/Numeric/Not starting with 0 and valid Aadhaar Number----
function CheckSum(id) {
    var Aadhaar = document.getElementById(id).value;
    if (isNaN(Aadhaar) == true) {
        document.getElementById(id).value = '';
        alert('Please enter a valid numeric value for Aadhaar-ID');
        return;
    }
    if (Aadhaar.length == 12 && Aadhaar.charAt(0) != '0') {
        var result = ValidateAadhaarNumber(Aadhaar);
        if (result != "1") {
            document.getElementById(id).value = '';
            alert('Please eneter a valid Aadhaar-ID');  
        }
        else {
            return true;
        }
    }
    else {
        document.getElementById(id).value = '';
        alert('Please enter a valid 12 digit Aadhaar-ID');
    }
}


function ValidateAadhaarNumber(Aadhaar) {
    var Result;
    switch (true) {
        case Aadhaar == "":
            Result = "0";
            break;
        case AadhaarCheck(Aadhaar, 0) == 0:
            Result = "1";
            break;
        default:
            Result = "0";
    }
    return Result;
}
function AadhaarCheck(Aadhaar, OffVal) {

    var d = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
           [1, 2, 3, 4, 0, 6, 7, 8, 9, 5],
           [2, 3, 4, 0, 1, 7, 8, 9, 5, 6],
           [3, 4, 0, 1, 2, 8, 9, 5, 6, 7],
           [4, 0, 1, 2, 3, 9, 5, 6, 7, 8],
           [5, 9, 8, 7, 6, 0, 4, 3, 2, 1],
           [6, 5, 9, 8, 7, 1, 0, 4, 3, 2],
           [7, 6, 5, 9, 8, 2, 1, 0, 4, 3],
           [8, 7, 6, 5, 9, 3, 2, 1, 0, 4],
           [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]];

    var p = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
           [1, 5, 7, 6, 2, 8, 3, 0, 9, 4],
           [5, 8, 0, 3, 7, 9, 6, 1, 4, 2],
           [8, 9, 1, 6, 0, 4, 3, 5, 2, 7],
           [9, 4, 5, 3, 1, 2, 6, 8, 7, 0],
           [4, 2, 8, 6, 5, 7, 3, 9, 0, 1],
           [2, 7, 9, 3, 8, 0, 6, 4, 1, 5],
           [7, 0, 4, 6, 9, 1, 3, 2, 5, 8]];

    var flag = 0;
    for (i = Aadhaar.length - 1; i >= 0; i = i - 1) {
        flag = d[flag][p[(Aadhaar.length - 1 - i + OffVal) % 8][parseInt(Aadhaar.substr(i, 1))]];
    }
    return flag;
}
//END :- Aadhaar Authentication


 






















//Modified By Raghunath Reddy : Oct-29 
function checkNumeric(evt) {
    evt = (evt) ? evt : window.event

    var charCode = (evt.which) ? evt.which : evt.keyCode

    if ((charCode != 31 && (charCode < 48 || charCode > 57) && (charCode < 35 || charCode > 41)) && (charCode != 46) && (charCode != 8) && (charCode != 9)) {
        status = "This field accepts numbers only.";
        return false
    }
    status = ""
    return true
}
//Added Raghunath Reddy : Oct-29 
function checkNumericMobile(evt) {
    evt = (evt) ? evt : window.event

    var charCode = (evt.which) ? evt.which : evt.keyCode
    //    alert(charCode);
    if ((charCode < 47 || charCode > 58)) {
        status = "This field accepts numbers only.";
        return false
    }
    status = ""
    return true
}
//Added Raghunath Reddy : Oct-29 
function checkNumerOnly(field) {
    var numSet = /^[0-9]*$/;
    if (!numSet.test(field.value)) {
        field.value = field.value.replace(/[^0-9-'.']/g, "");
    }
}
//Added Raghunath Reddy : Oct-29 
function checkNumericOnly(field) {
    var numSet = /^[0-9]*$/;
    if (!numSet.test(field.value)) {
        field.value = field.value.replace(/[^0-9-'.']/g, "");
    }
}


function checkAlphabets(evt) {
    evt = (evt) ? evt : window.event
    var charCode = (evt.which) ? evt.which : evt.keyCode
    if ((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122) ||
    (charCode == 32) || (charCode == 8) || (charCode == 9) || (charCode == 127) || (charCode >= 37 && charCode <= 40) || (charCode == 8) || (charCode == 46)) {
        status = ""
        return true
    }
    status = "This field accepts alphabets only."
    return false
}
function checkAlphabets1(evt) {
    evt = (evt) ? evt : window.event

    var charCode = (evt.which) ? evt.which : evt.keyCode
    if (charCode == 8 || charCode == 37 || charCode == 39 || charCode == 46) {
        status = ""
        return true
    }
    else
        if ((charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122) || charCode == 32) {
        status = ""
        return true
    }
    status = "This field accepts alphabets only."
    return false
}
function checkDate(dateObj, msgcontrol) {
    var actDate = new Date();
    var dPart = dateObj.value.split("/");
    if (dPart.length == 3) {
        var ftrDate = new Date(dPart[2], dPart[1] - 1, dPart[0]);
        if (!isNaN(ftrDate) && ftrDate.getDate() == dPart[0] &&
                  ftrDate.getMonth() == dPart[1] - 1 && ftrDate < actDate) {
            document.getElementById(msgcontrol).innerHTML = '';
            return true;
        }


    }
    document.getElementById(msgcontrol).innerHTML = '<font color="RED"> Please Enter Date Till Current Date in Format (dd/mm/yyyy) </font>';
    //dateObj.select();
    //  dateObj.focus();

    return false;
}

function CheckDateValid(oSrc, args) {
    var today = new Date();
    var SysDate = today.getDate();
    var SysMonth = today.getMonth() + 1; //January is 0!
    var SysYear = today.getFullYear();
    var dateOfBirth = args.Value;
    alert(dateOfBirth);
    var ArrDob = dateOfBirth.split("/");
    if (ArrDob.length == 3) {
        var DobMonth = ArrDob[0];
        var DobDate = ArrDob[1];
        var DobYear = ArrDob[2];
        alert("DobYear=" + DobYear + "SysYear =" + SysYear + "DobMonth=" + DobMonth + "SysMonth=" + SysMonth + "DobDate=" + DobDate + "SysDate=" + SysDate);
        if (DobYear > SysYear) {
            args.IsValid = false;
            return;
        }
        else if ((DobYear == SysYear) && (DobDate > SysMonth)) {
            // this will check mm/dd/yyyy else if ((DobYear == SysYear) && (DobMonth > SysMonth)) { 
            args.IsValid = false;
            return;
        }
        else if ((DobYear == SysYear) && (DobDate == SysMonth) && (DobMonth > SysDate)) {
            // this will check mm/dd/yyyy  else if ((DobYear == SysYear) && (DobMonth == SysMonth) && (DobDate > SysDate)) 
            {
                args.IsValid = false;
                return;
            }
            args.IsValid = true;
        }
    }
    else {
        return false;
    }
}

function validateMaxLimit(field, maxlimit) {

    var remainingChars = maxlimit - field.value.length;
    if (remainingChars <= 0) {
        field.value = field.value.substring(maxlimit, 0);
        document.getElementById('valErrorMsg').style.display = "block";
        return false;

    }
    else {
        document.getElementById('valErrorMsg').style.display = "none";
        return true;
    }
}

function textboxMultilineMaxNumber(txt, maxLen, evt) {
    evt = (evt) ? evt : window.event;
    var charCode = (evt.which) ? evt.which : evt.keyCode;
    if (txt.value.length > (maxLen - 1)) {
        if (charCode == 08 || charCode == 127) {
            return true;
        }

        else {

            return false;

        }

        return false;

    }

}



function validatelimit(obj, maxchar) {

    if (this.id) { obj = this; }

    var remaningChar = maxchar - trimEnter(obj.value).length;

    if (remaningChar <= 0) {

        obj.value = obj.value.substring(maxchar, 0);

        return false;

    }

    else {

        return true;

    }

}

function trimEnter(dataStr) {

    return dataStr.replace(/(\r\n|\r|\n)/g, "");

}




function doClick(field, event) {

    var key;

    if (window.event) {

        //alert("IE Fix");

        key = window.event.keyCode;

    }

    else {

        //alert("Firefox Fix");

        key = event.which;

    }

    if (key == 13) {

        var btn = document.getElementById(field);

        btn.click();

    }

    return false;

}




